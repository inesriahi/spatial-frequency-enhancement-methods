{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# A Python GUI for applying some of spatial & frequency enhancement methods"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "### Tkinter stuff\n",
    "from tkinter import *\n",
    "from PIL import ImageTk, Image\n",
    "from tkinter import filedialog\n",
    "from tkinter import ttk\n",
    "\n",
    "### Image processing stuff\n",
    "import numpy as np\n",
    "from skimage import io, filters\n",
    "from skimage.color import rgb2hsv, hsv2rgb\n",
    "import cv2\n",
    "\n",
    "### Plotting stuff\n",
    "from matplotlib.backends.backend_agg import FigureCanvasAgg as FigureCanvas\n",
    "from matplotlib.figure import Figure\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "## constants\n",
    "SMOOTHING_AVERAGE = 'Smoothing AVERAGE'\n",
    "SMOOTHING_GAUSSIAN = 'Smoothing GAUSSIAN'\n",
    "SHARPENING_LAPLACIAN = 'Sharpening: LAPLACIAN'\n",
    "SHARPENING_UNSHARP = 'Sharpening: UNSHARP'\n",
    "EDGE_SOBEL = 'Edge detection: SOBEL'\n",
    "EDGE_LAPLACIAN = 'Edge detection: LAPLACIAN'\n",
    "\n",
    "## Helper functions\n",
    "def prepare_canvas(**fig_kw):\n",
    "    fig, axes = plt.subplots(**fig_kw)\n",
    "    canvas = FigureCanvas(fig)\n",
    "    return fig, canvas, axes\n",
    "\n",
    "def plottoarray(fig, canvas):\n",
    "    '''\n",
    "    Convert the given figure to a numpy array\n",
    "    '''\n",
    "    canvas.draw()                 # draw the canvas, cache the renderer\n",
    "    width, height = map(int, fig.get_size_inches() * fig.get_dpi())\n",
    "    image = np.frombuffer(canvas.tostring_rgb(), dtype='uint8').reshape(height, width, 3)\n",
    "    return image\n",
    "\n",
    "def iscolored(image):\n",
    "    '''\n",
    "    Check if the image is grayscale or colored\n",
    "    '''\n",
    "    if len(image.shape) == 3:\n",
    "        return True\n",
    "    else:\n",
    "        return False\n",
    "    \n",
    "def image_to_plots(image, title = ''):\n",
    "    ## if the loaded image is grayscale\n",
    "    ## prepare canvas\n",
    "    fig, canvas, axes = prepare_canvas()\n",
    "#         fig.tight_layout(pad=3.0)\n",
    "    axes.imshow(image, cmap='gray')\n",
    "    axes.set_title(title)\n",
    "    axes.axis('off')\n",
    "    \n",
    "    ## convert the plot to numpy array (as an image)\n",
    "    plots = plottoarray(fig, canvas)\n",
    "\n",
    "    # convert the plots to PIL format\n",
    "    pil_plots = Image.fromarray(plots)\n",
    "\n",
    "    # ...and then to ImageTk format\n",
    "    tk_plots = ImageTk.PhotoImage(pil_plots)\n",
    "    return tk_plots, pil_plots\n",
    " \n",
    "    \n",
    "def displayon(panel, plots, row=6, column=0, columnspan=1):\n",
    "    '''\n",
    "    Display the image on a panel\n",
    "    '''\n",
    "    if panel is None:\n",
    "        panel = Label(image=plots)\n",
    "        panel.image = plots\n",
    "        panel.grid(row=row, column=column, columnspan=columnspan)\n",
    "\n",
    "    else:\n",
    "        panel.configure(image=plots)\n",
    "        panel.image = plots \n",
    "        \n",
    "\n",
    "def ft_shifted(img):\n",
    "    '''\n",
    "    Transfer the image to frequency and shift it\n",
    "    '''\n",
    "    IMG = np.fft.fft2(img)\n",
    "    IMG_Shift = np.fft.fftshift(IMG)\n",
    "    return IMG_Shift\n",
    "\n",
    "    \n",
    "def smoothing_average(entry_average):\n",
    "    '''\n",
    "    Apply average smoothing for spatial and frequency with a specified kernel size\n",
    "    '''\n",
    "    global image, panelB, panelC\n",
    "    kernel_size = int(entry_average.get())\n",
    "    assert (kernel_size % 2 == 1) and (kernel_size > 0), 'Kernel Size should be odd and positive!'\n",
    "    \n",
    "    kernel = np.ones((kernel_size, kernel_size)) / (kernel_size * kernel_size)\n",
    "    res = cv2.filter2D(image,-1,kernel)\n",
    "    plots, pil_plots = image_to_plots(res.astype('uint8'), title='Spatial Domain')\n",
    "    displayon(panelB, plots)\n",
    "    \n",
    "    \n",
    "    ## fourier transform\n",
    "    size=kernel_size\n",
    "    if len(image.shape) == 3:\n",
    "        img = cv2.cvtColor(image, cv2.COLOR_RGB2GRAY)\n",
    "    else:\n",
    "        img = image\n",
    "    IMG_Shift= ft_shifted(img)\n",
    "    mean=np.zeros(img.shape)\n",
    "    mean[0:size,0:size]=np.ones((size,size)) / (size*size)\n",
    "    FLTR_Shift = ft_shifted(mean)\n",
    "    smoothFFT=IMG_Shift*FLTR_Shift\n",
    "    smoothFFT=np.fft.fftshift(smoothFFT)\n",
    "    res=np.real(np.fft.ifft2(smoothFFT))\n",
    "    \n",
    "    plots, pil_plots = image_to_plots(res, title='Fourier Domain')\n",
    "\n",
    "    ## put the images in the GUI\n",
    "    displayon(panelC, plots, row=6,column=1)\n",
    "        \n",
    "\n",
    "def smoothing_gaussian(entry_gaussian_sigma, entry_gaussian_ksize):\n",
    "    '''\n",
    "    Apply gaussian smoothing for spatial and frequency with a specified kernel size and sigma\n",
    "    '''\n",
    "    global image, panelB, panelC\n",
    "    sigma = float(entry_gaussian_sigma.get())\n",
    "    kernel_size = int(entry_gaussian_ksize.get())\n",
    "    assert sigma > 0, 'Sigma Should be greater that Zero!'\n",
    "    assert (kernel_size % 2 == 1) and (kernel_size > 0), 'Kernel Size should be odd and positive!'\n",
    "    \n",
    "    res = cv2.GaussianBlur(image, (kernel_size, kernel_size), sigma)\n",
    "        \n",
    "    plots, pil_plots = image_to_plots(res.astype('uint8'), title='Spatial Domain')\n",
    "    \n",
    "    ## put the images in the GUI\n",
    "    displayon(panelB, plots) \n",
    "    \n",
    "    \n",
    "    ## fourier transform\n",
    "    size=kernel_size\n",
    "    if len(image.shape) == 3:\n",
    "        img = cv2.cvtColor(image, cv2.COLOR_RGB2GRAY)\n",
    "    else:\n",
    "        img = image\n",
    "        \n",
    "    IMG_Shift= ft_shifted(img)\n",
    "    gaussian=np.zeros(img.shape)\n",
    "    gaussian0=cv2.getGaussianKernel(size, sigma)\n",
    "    gaussian0=gaussian0*gaussian0.T\n",
    "    gaussian[0:size,0:size]=gaussian0\n",
    "    FLTR_Shift = ft_shifted(gaussian)\n",
    "    smoothFFT=IMG_Shift*FLTR_Shift\n",
    "    smoothFFT=np.fft.fftshift(smoothFFT)\n",
    "    res=np.real(np.fft.ifft2(smoothFFT))\n",
    "    \n",
    "    plots, pil_plots = image_to_plots(res, title='Fourier Domain')\n",
    "\n",
    "    ## put the images in the GUI\n",
    "    displayon(panelC, plots, row=6,column=1)\n",
    "    \n",
    "        \n",
    "      \n",
    "def sharpening_laplacian(entry_laplacian_ksize):\n",
    "    '''\n",
    "    Apply laplacian sharpening for spatial and frequency with a specified kernel size (for spatial domain only)\n",
    "    '''\n",
    "    global image, panelB, panelC\n",
    "    kernel_size = int(entry_laplacian_ksize.get())\n",
    "    assert (kernel_size % 2 == 1) and (kernel_size > 0), 'Kernel Size should be odd and positive!'\n",
    "\n",
    "    if iscolored(image):\n",
    "        res = cv2.Laplacian(image, -1, ksize = kernel_size)\n",
    "        res = image + res\n",
    "    else:\n",
    "        res = cv2.Laplacian(image,cv2.CV_64F, ksize = kernel_size)\n",
    "        res = np.abs(image - res)\n",
    "        \n",
    "    plots, pil_plots = image_to_plots(res.astype('uint8'), title='Spatial Domain')\n",
    "\n",
    "    ## put the images in the GUI\n",
    "    displayon(panelB, plots)\n",
    "    \n",
    "    ## fourier transform\n",
    "    if len(image.shape) == 3:\n",
    "        img = cv2.cvtColor(image, cv2.COLOR_RGB2GRAY)\n",
    "    else:\n",
    "        img = image\n",
    "        \n",
    "    IMG_Shift= ft_shifted(img)\n",
    "    laplacian=np.zeros(img.shape)\n",
    "    laplacian0=np.array([[0, 1, 0], [1,-4, 1], [0, 1, 0]]) ## previously specified matrix\n",
    "    laplacian[0:3,0:3]=laplacian0\n",
    "    FLTR_Shift = ft_shifted(laplacian)\n",
    "    smoothFFT=IMG_Shift*FLTR_Shift\n",
    "    smoothFFT = IMG_Shift - smoothFFT\n",
    "    smoothFFT=np.fft.fftshift(smoothFFT)\n",
    "    res= np.real(np.fft.ifft2(smoothFFT))\n",
    "    \n",
    "    plots, pil_plots = image_to_plots(res, title='Fourier Domain')\n",
    "\n",
    "    ## put the images in the GUI\n",
    "    displayon(panelC, plots, row=6,column=1)\n",
    "\n",
    "    \n",
    "def sharpening_unsharp(entry_unsharp_kk):\n",
    "    '''\n",
    "    Apply unsharpning for spatial and frequency with a constant\n",
    "    '''\n",
    "    global image, panelB, panelC\n",
    "    k = float(entry_unsharp_kk.get())\n",
    "    blurred = cv2.GaussianBlur(image, (3,3), 5)\n",
    "    res = image - k * blurred\n",
    "    \n",
    "    plots, pil_plots = image_to_plots(res.astype('uint8'), title='Spatial Domain')\n",
    "\n",
    "    ## put the images in the GUI\n",
    "    displayon(panelB, plots) \n",
    "    \n",
    "    \n",
    "    ## fourier transform\n",
    "    if len(image.shape) == 3:\n",
    "        img = cv2.cvtColor(image, cv2.COLOR_RGB2GRAY)\n",
    "    else:\n",
    "        img = image\n",
    "        \n",
    "    IMG_Shift= ft_shifted(img)\n",
    "    gaussian=np.zeros(img.shape)\n",
    "    gaussian0=cv2.getGaussianKernel(3, 5)\n",
    "    gaussian0=gaussian0*gaussian0.T\n",
    "    gaussian[0:3,0:3]=gaussian0\n",
    "    FLTR_Shift = ft_shifted(gaussian)\n",
    "    smoothFFT=IMG_Shift*FLTR_Shift\n",
    "    FFT = IMG_Shift - k * smoothFFT\n",
    "    FFT=np.fft.fftshift(FFT)\n",
    "    res=np.real(np.fft.ifft2(FFT))\n",
    "    \n",
    "    plots, pil_plots = image_to_plots(res, title='Fourier Domain')\n",
    "\n",
    "    ## put the images in the GUI\n",
    "    displayon(panelC, plots, row=6,column=1)\n",
    "    \n",
    "    \n",
    "    \n",
    "def edge_sobel(entry_sobel_ksize):\n",
    "    '''\n",
    "    Apply sobel edge detection for spatial and frequency with a specified kernel size\n",
    "    '''\n",
    "    global image, panelB, panelC\n",
    "    \n",
    "    kernel_size = int(entry_sobel_ksize.get())\n",
    "    assert (kernel_size % 2 == 1) and (kernel_size > 0), 'Kernel Size should be odd and positive!'\n",
    "    gray = cv2.GaussianBlur(image, (3, 3),0)\n",
    "    if iscolored(image):\n",
    "        hsv = cv2.cvtColor(gray, cv2.COLOR_RGB2HSV)\n",
    "        h = hsv[:,:,0]\n",
    "        s = hsv[:,:,1]\n",
    "        v = hsv[:,:,2]\n",
    "        new_v_x = cv2.Sobel(v, -1, 1, 0, ksize=kernel_size)\n",
    "        new_v_y = cv2.Sobel(v, -1, 0, 1, ksize=kernel_size)\n",
    "        \n",
    "        abs_grad_x = cv2.convertScaleAbs(new_v_x)\n",
    "        abs_grad_y = cv2.convertScaleAbs(new_v_y)\n",
    "        \n",
    "#         grad = cv2.addWeighted(abs_grad_x, 1, abs_grad_y, 1, 0)\n",
    "        res = abs_grad_x + abs_grad_y\n",
    "        ret,res = cv2.threshold(res,0,255,cv2.THRESH_OTSU)\n",
    "        res = np.dstack([h,s,res])\n",
    "        res = cv2.cvtColor(res, cv2.COLOR_HSV2RGB)\n",
    "        \n",
    "    else:\n",
    "        grad_x = cv2.Sobel(gray, cv2.CV_16S, 1, 0, ksize=kernel_size)\n",
    "        grad_y = cv2.Sobel(gray, cv2.CV_16S, 0, 1, ksize=kernel_size)\n",
    "        \n",
    "        abs_grad_x = cv2.convertScaleAbs(grad_x)\n",
    "        abs_grad_y = cv2.convertScaleAbs(grad_y)\n",
    "\n",
    "#         grad = cv2.addWeighted(abs_grad_x, 1, abs_grad_y, 1, 0)\n",
    "        grad = abs_grad_x + abs_grad_y\n",
    "        ret,res = cv2.threshold(grad,0,255,cv2.THRESH_OTSU)\n",
    "    \n",
    "    plots, pil_plots = image_to_plots(res.astype('uint8'), title='Spatial Domain')\n",
    "\n",
    "    ## put the images in the GUI\n",
    "    displayon(panelB, plots) \n",
    "  \n",
    "    ## fourier transform\n",
    "    if len(image.shape) == 3:\n",
    "        img = cv2.cvtColor(image, cv2.COLOR_RGB2GRAY)\n",
    "    else:\n",
    "        img = image\n",
    "      \n",
    "    \n",
    "    ### for getting the sobel matrix given a kernel size\n",
    "    def generate_sobel_matrices(size): ## https://stackoverflow.com/a/41065243\n",
    "        u = np.arange(-size//2+1,size//2+1)\n",
    "        v = np.arange(size//2,-size//2,-1)\n",
    "        x,y = np.meshgrid(u,v)\n",
    "        x,y\n",
    "        Gx = np.zeros((size, size))\n",
    "        Gy = np.zeros((size, size))\n",
    "        Gx = np.divide(x, x*x+y*y, out=Gx, where=(x*x+y*y)!=0)\n",
    "        Gy = np.divide(y, x*x+y*y, out=Gy, where=(x*x+y*y)!=0)\n",
    "        return Gx,Gy\n",
    "    \n",
    "    size = kernel_size\n",
    "    sobel0, sobel1 = generate_sobel_matrices(size)\n",
    "    \n",
    "    IMG_Shift= ft_shifted(img)\n",
    "\n",
    "    ## sobel_x\n",
    "    sobel_x=np.zeros(img.shape)\n",
    "    sobel_x[0:size,0:size]=sobel0\n",
    "    FLTR_Shift = ft_shifted(sobel_x)\n",
    "    grad_x=IMG_Shift*FLTR_Shift\n",
    "    \n",
    "    #Sobel_y\n",
    "    sobel_y=np.zeros(img.shape)\n",
    "    sobel_y[0:size,0:size]=sobel1\n",
    "    FLTR_Shift = ft_shifted(sobel_y)\n",
    "    grad_y=IMG_Shift*FLTR_Shift\n",
    "    \n",
    "    grad = grad_x + grad_y\n",
    "    \n",
    "    \n",
    "    FLTR_Shift = ft_shifted(grad)\n",
    "    \n",
    "    ## rebuild the image\n",
    "    grad=np.fft.fftshift(grad)\n",
    "    res=np.real(np.fft.ifft2(grad))\n",
    "    \n",
    "    plots, pil_plots = image_to_plots(res, title='Fourier Domain')\n",
    "\n",
    "    ## put the images in the GUI\n",
    "    displayon(panelC, plots, row=6,column=1)\n",
    "    \n",
    "    \n",
    "        \n",
    "def edge_laplacian(entry_edge_laplacian_ksize):\n",
    "    '''\n",
    "    Apply laplacian edge detection for spatial and frequency with a specified kernel size\n",
    "    '''\n",
    "    global image, panelB, panelC\n",
    "    kernel_size = int(entry_edge_laplacian_ksize.get())\n",
    "    assert (kernel_size % 2 == 1) and (kernel_size > 0), 'Kernel Size should be odd and positive!'\n",
    "    res = cv2.GaussianBlur(image, (11,11),0)\n",
    "    if iscolored(image):\n",
    "        hsv = cv2.cvtColor(res, cv2.COLOR_RGB2HSV)\n",
    "        h = hsv[:,:,0]\n",
    "        s = hsv[:,:,1]\n",
    "        v = hsv[:,:,2]\n",
    "        \n",
    "        new_v = cv2.Laplacian(v,cv2.CV_32F, ksize = kernel_size)\n",
    "        res = np.dstack([h,s,new_v])\n",
    "        print(res.shape)\n",
    "        res = cv2.cvtColor(res, cv2.COLOR_HSV2RGB)\n",
    "    \n",
    "    else:    \n",
    "        res = cv2.Laplacian(res,cv2.CV_32F, ksize = kernel_size)\n",
    "    \n",
    "    plots, pil_plots = image_to_plots(res.astype('uint8'), title='Spatial Domain')\n",
    "    displayon(panelB, plots)\n",
    "    \n",
    "    ## fourier transform\n",
    "    if len(image.shape) == 3:\n",
    "        img = cv2.cvtColor(image, cv2.COLOR_RGB2GRAY)\n",
    "    else:\n",
    "        img = image\n",
    "        \n",
    "    IMG_Shift= ft_shifted(img)\n",
    "    laplacian=np.zeros(img.shape)\n",
    "    laplacian0=np.array([[0, 1, 0], [1,-4, 1], [0, 1, 0]])\n",
    "    laplacian[0:3,0:3]=laplacian0\n",
    "    FLTR_Shift = ft_shifted(laplacian)\n",
    "    FFT=IMG_Shift*FLTR_Shift\n",
    "    FFT=np.fft.fftshift(FFT)\n",
    "    res=np.real(np.fft.ifft2(FFT))\n",
    "    \n",
    "    plots, pil_plots = image_to_plots(res, title='Fourier Domain')\n",
    "\n",
    "    ## put the images in the GUI\n",
    "    displayon(panelC, plots, row=6,column=1)\n",
    "    \n",
    "    \n",
    "def select_point_callbackFunc(event):\n",
    "    '''\n",
    "    For the combobox options, get the value and perform the required transformation\n",
    "    '''\n",
    "    if event.widget.get() == SMOOTHING_AVERAGE:\n",
    "        \n",
    "        ## hide the other widgets\n",
    "        label_gaussian_sigma.grid_forget()\n",
    "        entry_gaussian_sigma.grid_forget()\n",
    "        label_gaussian_ksize.grid_forget()\n",
    "        entry_gaussian_ksize.grid_forget()\n",
    "        label_sobel_ksize.grid_forget()\n",
    "        entry_sobel_ksize.grid_forget()\n",
    "        label_unsharp_k.grid_forget()\n",
    "        entry_unsharp_k.grid_forget()\n",
    "        label_laplacian_ksize.grid_forget()\n",
    "        entry_laplacian_ksize.grid_forget()\n",
    "        label_edge_laplacian_ksize.grid_forget()\n",
    "        entry_edge_laplacian_ksize.grid_forget()\n",
    "        \n",
    "        ## place the option's widgets\n",
    "        label_average.grid(row=3, column=0)\n",
    "        entry_average.grid(row=3, column=1)\n",
    "        \n",
    "        ## perform the required transformation\n",
    "        check_btn.config(command=lambda: smoothing_average(entry_average))\n",
    "        check_btn.grid(row=4, column=0, columnspan = 2)\n",
    "        \n",
    "    elif event.widget.get() == SMOOTHING_GAUSSIAN:\n",
    "        ## hide the other widgets\n",
    "        label_average.grid_forget()\n",
    "        entry_average.grid_forget()\n",
    "        label_sobel_ksize.grid_forget()\n",
    "        entry_sobel_ksize.grid_forget()\n",
    "        label_unsharp_k.grid_forget()\n",
    "        entry_unsharp_k.grid_forget()\n",
    "        label_laplacian_ksize.grid_forget()\n",
    "        entry_laplacian_ksize.grid_forget()\n",
    "        label_edge_laplacian_ksize.grid_forget()\n",
    "        entry_edge_laplacian_ksize.grid_forget()\n",
    "        \n",
    "        ## place the option's widgets\n",
    "        label_gaussian_sigma.grid(row=3, column=0)\n",
    "        entry_gaussian_sigma.grid(row=3, column=1)\n",
    "        label_gaussian_ksize.grid(row=4, column=0)\n",
    "        entry_gaussian_ksize.grid(row=4, column=1)\n",
    "        \n",
    "        ## perform the required transformation\n",
    "        check_btn.config(command=lambda: smoothing_gaussian(entry_gaussian_sigma, entry_gaussian_ksize))\n",
    "        check_btn.grid(row=5, column=0, columnspan = 2)\n",
    "        \n",
    "    elif event.widget.get() == SHARPENING_LAPLACIAN:\n",
    "        ## hide the other widgets\n",
    "        label_average.grid_forget()\n",
    "        entry_average.grid_forget()\n",
    "        label_sobel_ksize.grid_forget()\n",
    "        entry_sobel_ksize.grid_forget()\n",
    "        label_unsharp_k.grid_forget()\n",
    "        entry_unsharp_k.grid_forget()\n",
    "        label_gaussian_sigma.grid_forget()\n",
    "        entry_gaussian_sigma.grid_forget()\n",
    "        label_gaussian_ksize.grid_forget()\n",
    "        entry_gaussian_ksize.grid_forget()\n",
    "        label_edge_laplacian_ksize.grid_forget()\n",
    "        entry_edge_laplacian_ksize.grid_forget()\n",
    "        \n",
    "        \n",
    "        label_laplacian_ksize.grid(row=3, column=0)\n",
    "        entry_laplacian_ksize.grid(row=3, column=1)\n",
    "        \n",
    "        ## perform the required transformation\n",
    "        check_btn.config(command=lambda: sharpening_laplacian(entry_laplacian_ksize))\n",
    "        check_btn.grid(row=4, column=0, columnspan = 2)\n",
    "        \n",
    "    elif event.widget.get() == SHARPENING_UNSHARP:\n",
    "        ## hide the other widgets\n",
    "        label_average.grid_forget()\n",
    "        entry_average.grid_forget()\n",
    "        label_sobel_ksize.grid_forget()\n",
    "        entry_sobel_ksize.grid_forget()\n",
    "        label_gaussian_sigma.grid_forget()\n",
    "        entry_gaussian_sigma.grid_forget()\n",
    "        label_gaussian_ksize.grid_forget()\n",
    "        entry_gaussian_ksize.grid_forget()\n",
    "        label_laplacian_ksize.grid_forget()\n",
    "        entry_laplacian_ksize.grid_forget()\n",
    "        label_edge_laplacian_ksize.grid_forget()\n",
    "        entry_edge_laplacian_ksize.grid_forget()\n",
    "        \n",
    "        ## place the option's widgets\n",
    "        label_unsharp_k.grid(row=3, column=0)\n",
    "        entry_unsharp_k.grid(row=3, column=1)\n",
    "        \n",
    "        ## perform the required transformation\n",
    "        check_btn.config(command=lambda: sharpening_unsharp(entry_unsharp_k))\n",
    "        check_btn.grid(row=5, column=0, columnspan = 2)\n",
    "  \n",
    "\n",
    "    elif event.widget.get() == EDGE_SOBEL:\n",
    "        ## hide the other widgets\n",
    "        label_average.grid_forget()\n",
    "        entry_average.grid_forget()\n",
    "        label_unsharp_k.grid_forget()\n",
    "        entry_unsharp_k.grid_forget()\n",
    "        label_gaussian_sigma.grid_forget()\n",
    "        entry_gaussian_sigma.grid_forget()\n",
    "        label_gaussian_ksize.grid_forget()\n",
    "        entry_gaussian_ksize.grid_forget()\n",
    "        label_laplacian_ksize.grid_forget()\n",
    "        entry_laplacian_ksize.grid_forget()\n",
    "        label_edge_laplacian_ksize.grid_forget()\n",
    "        entry_edge_laplacian_ksize.grid_forget()\n",
    "        \n",
    "        ## place the option's widgets\n",
    "        label_sobel_ksize.grid(row=3, column=0)\n",
    "        entry_sobel_ksize.grid(row=3, column=1)\n",
    "        \n",
    "        ## perform the required transformation\n",
    "        check_btn.config(command=lambda: edge_sobel(entry_sobel_ksize))\n",
    "        check_btn.grid(row=5, column=0, columnspan = 2)\n",
    "    \n",
    "    elif event.widget.get() == EDGE_LAPLACIAN:\n",
    "        ## hide the other widgets\n",
    "        label_average.grid_forget()\n",
    "        entry_average.grid_forget()\n",
    "        label_sobel_ksize.grid_forget()\n",
    "        entry_sobel_ksize.grid_forget()\n",
    "        label_unsharp_k.grid_forget()\n",
    "        entry_unsharp_k.grid_forget()\n",
    "        label_gaussian_sigma.grid_forget()\n",
    "        entry_gaussian_sigma.grid_forget()\n",
    "        label_gaussian_ksize.grid_forget()\n",
    "        entry_gaussian_ksize.grid_forget()\n",
    "        label_laplacian_ksize.grid_forget()\n",
    "        entry_laplacian_ksize.grid_forget()\n",
    "        \n",
    "        \n",
    "        label_edge_laplacian_ksize.grid(row=3, column=0)\n",
    "        entry_edge_laplacian_ksize.grid(row=3, column=1)\n",
    "        \n",
    "        ## perform the required transformation\n",
    "        check_btn.config(command=lambda: edge_laplacian(entry_edge_laplacian_ksize))\n",
    "        check_btn.grid(row=5, column=0, columnspan = 2)\n",
    "    \n",
    "    else:\n",
    "        print(\"No valid option!\")\n",
    "        \n",
    "        \n",
    "\n",
    "def select_image():\n",
    "    global panelA, dropdown, combolabel, image, panelB, panelC\n",
    "    ## ask for the image to be opened\n",
    "    path = filedialog.askopenfilename()\n",
    "    \n",
    "    if len(path) > 0: # check if there is an image already\n",
    "        ## read the image\n",
    "        image = io.imread(path)\n",
    "        \n",
    "        ## get the image version of the histograms of the image\n",
    "        plots, pil_plots = image_to_plots(image)\n",
    "        \n",
    "        ## display in GUI\n",
    "        displayon(panelA, plots, 1, columnspan=2)\n",
    "        ## place the combobox\n",
    "        point_combolabel.grid(row = 2, column = 0) \n",
    "        point_combo.grid(row = 2, column = 1)\n",
    "        \n",
    "        \n",
    "        \n",
    "        \n",
    "## initialize the root\n",
    "root = Tk()\n",
    "## set a white background\n",
    "root.configure(bg='white')\n",
    "panelA = None\n",
    "panelB = None\n",
    "panelC = None\n",
    "\n",
    "## 'Select image' button\n",
    "btn = Button(root, text = \"Select an image\", command = select_image)\n",
    "btn.grid(row=0, column=0, padx=10, pady = 10, columnspan = 3)\n",
    "\n",
    "### Combo for choosing point transformation\n",
    "point_combolabel = Label(root, text = \"Choose the enhncement method:\",  \n",
    "          background = 'white', foreground =\"black\",  \n",
    "          font = (\"Times New Roman\", 15))\n",
    "\n",
    "point_combo = ttk.Combobox(root, state = 'readonly', width = 30)\n",
    "point_combo['values'] = (SMOOTHING_AVERAGE, SMOOTHING_GAUSSIAN,\n",
    "                        SHARPENING_LAPLACIAN, SHARPENING_UNSHARP, \n",
    "                        EDGE_SOBEL,EDGE_LAPLACIAN)\n",
    "\n",
    "point_combo.bind(\"<<ComboboxSelected>>\", select_point_callbackFunc)\n",
    "\n",
    "check_btn = Button(root, text=\"Show Result\")\n",
    "\n",
    "#### Average smoothing params\n",
    "label_average = Label(root, text = 'Enter the kernel size:', background='white')\n",
    "entry_average = Entry(root)\n",
    "\n",
    "\n",
    "#### Gaussian smoothing params\n",
    "label_gaussian_sigma = Label(root, text = 'Enter sigma:', background='white')\n",
    "entry_gaussian_sigma = Entry(root)\n",
    "label_gaussian_ksize = Label(root, text = 'Enter kernel size:', background='white')\n",
    "entry_gaussian_ksize = Entry(root)\n",
    "\n",
    "#### Laplacian Sharpening params\n",
    "label_laplacian_ksize = Label(root, text = 'Enter kernel size (for spatial only):', background='white')\n",
    "entry_laplacian_ksize = Entry(root)\n",
    "\n",
    "#### Unsharp params\n",
    "label_unsharp_k = Label(root, text = 'Enter k:', background='white')\n",
    "entry_unsharp_k = Entry(root)\n",
    "\n",
    "###sobel_ksize params\n",
    "label_sobel_ksize = Label(root, text = 'Enter kernel size:', background='white')\n",
    "entry_sobel_ksize = Entry(root)\n",
    "\n",
    "### Edge Laplacian\n",
    "label_edge_laplacian_ksize = Label(root, text = 'Enter kernel size (for spatial only):', background='white')\n",
    "entry_edge_laplacian_ksize = Entry(root)\n",
    "\n",
    "root.mainloop()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### For this image\n",
    "<img src=\"imgs/0.png\" style=\"display: block;margin-left: auto;margin-right: auto;\" />\n",
    "\n",
    "$$\\rule{8cm}{0.4pt}$$\n",
    "# Smoothing:\n",
    "\n",
    "#### Applying average filtering for both spatial and frequency domains results in this:\n",
    "\n",
    "\n",
    "<img src=\"imgs/1.png\" style=\"display: block;margin-left: auto;margin-right: auto;\" />\n",
    "\n",
    "#### We can see that the results are similar for both images. We can see also the repetition in the frequency domain which is one of its characteristics.\n",
    "\n",
    "$$\\rule{8cm}{0.4pt}$$\n",
    "<img src=\"imgs/2.png\" style=\"display: block;margin-left: auto;margin-right: auto;\" />\n",
    "\n",
    "#### The same thing applies for gaussian smoothing\n",
    "\n",
    "# Sharpening:\n",
    "\n",
    "$$\\rule{8cm}{0.4pt}$$\n",
    "<img src=\"imgs/3.png\" style=\"display: block;margin-left: auto;margin-right: auto;\" />\n",
    "\n",
    "#### Laplacian Sharpening shows slightly different results between the two domains. The parameters are specified for the spatial domain only. For the frequency domain, the following matrix is used for convolution:\n",
    "\n",
    "$$\\begin{bmatrix} 0 & -1 & 0 \\\\ -1 & 4 & -1 \\\\ 0 & -1 & 0 \\end{bmatrix}$$\n",
    "\n",
    "$$\\rule{8cm}{0.4pt}$$\n",
    "<img src=\"imgs/4.png\" style=\"display: block;margin-left: auto;margin-right: auto;\" />\n",
    "\n",
    "#### The same thing for Unsharp in which the result for both domains requires subtracting a certain fraction of a blurred image from the original image\n",
    "\n",
    "# Edge Detection:\n",
    "\n",
    "$$\\rule{8cm}{0.4pt}$$\n",
    "<img src=\"imgs/5.png\" style=\"display: block;margin-left: auto;margin-right: auto;\" />\n",
    "\n",
    "#### For the spatial domain: sobel filtering function in opencv was used to apply the filter with different sizes of the kernel in the spatial domain. However, for the frequency domain, a manually created filter is used (following this post: https://stackoverflow.com/a/41065243). The results are different visually.\n",
    "\n",
    "$$\\rule{8cm}{0.4pt}$$\n",
    "<img src=\"imgs/6.png\" style=\"display: block;margin-left: auto;margin-right: auto;\" />\n",
    "\n",
    "#### The parameters are only valid for the spatial domain. For the frequency domain, the following matrix is used:\n",
    "$$\\begin{bmatrix} 0 & -1 & 0 \\\\ -1 & 4 & -1 \\\\ 0 & -1 & 0 \\end{bmatrix}$$\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
